"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ava_1 = require("ava");
var _1 = require("../../");
ava_1.test('Should build with callback', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result, mock;
    return tslib_1.__generator(this, function (_a) {
        result = {
            users: [
                {
                    hello: 'world'
                }
            ]
        };
        mock = new _1.Mocker();
        mock.schema('users', { hello: { static: 'world' } }, 1);
        mock.build(function (e, db) { return t.deepEqual(db, result); });
        return [2 /*return*/];
    });
}); });
ava_1.test('Should produce an error', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result, mock;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                result = {
                    users: [
                        {
                            hello: 'world'
                        }
                    ]
                };
                mock = new _1.Mocker();
                mock.schema('users', { hello: { faker: 'worldrqwerqw' } }, 1);
                t.throws(function () { return mock.build(function (error) {
                    throw error;
                }); }, 'Schema: "users" Error: Error: "faker" TypeError: faker.worldrqwerqw is not a function');
                return [4 /*yield*/, mock.build()
                        .then(function (data) { return data; }, function (e) {
                        t.deepEqual(e.message, 'Schema: "users" Error: Error: "faker" TypeError: faker.worldrqwerqw is not a function');
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.test('Should produce an error when pass an string as options', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var err, mock;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                err = 'Schema: "users" An string "hey" is not recognized as a parameter.';
                mock = new _1.Mocker();
                mock.schema('users', { hello: { faker: 'worldrqwerqw' } }, 'hey');
                t.throws(function () { return mock.build(function (error) {
                    throw error;
                }); }, err);
                return [4 /*yield*/, mock.build()
                        .then(function (data) { return data; }, function (e) {
                        t.deepEqual(e.message, err);
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.test('Should produce an error when uniqueField is not an array', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var err, model, mock;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                err = 'Schema: "users" The posible values value is not an Array';
                model = {
                    name: {
                        values: 'a'
                    }
                };
                mock = new _1.Mocker();
                mock.schema('users', model, { uniqueField: 'name' });
                t.throws(function () { return mock.build(function (error) {
                    throw error;
                }); }, err);
                return [4 /*yield*/, mock.build()
                        .then(function (data) { return data; }, function (e) {
                        t.deepEqual(e.message, err);
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.test('Should produce an error when uniqueField not exists', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var err, model, mock;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                err = 'Schema: "users" The field "test" not exists.';
                model = {
                    name: {
                        values: ['a', 'b']
                    }
                };
                mock = new _1.Mocker();
                mock.schema('users', model, { uniqueField: 'test' });
                t.throws(function () { return mock.build(function (error) {
                    throw error;
                }); }, err);
                return [4 /*yield*/, mock.build()
                        .then(function (data) { return data; }, function (e) {
                        t.deepEqual(e.message, err);
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.test('Should build with await (Promised)', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result, mock, db;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                result = {
                    users: [
                        {
                            hello: 'world'
                        }
                    ]
                };
                mock = new _1.Mocker();
                return [4 /*yield*/, mock
                        .schema('users', { hello: { static: 'world' } }, 1)
                        .build()];
            case 1:
                db = _a.sent();
                t.deepEqual(db, result);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test('Should build with Promised old style', function (t) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var result, mock;
    return tslib_1.__generator(this, function (_a) {
        result = {
            users: [
                {
                    hello: 'world'
                }
            ]
        };
        mock = new _1.Mocker();
        mock
            .schema('users', { hello: { static: 'world' } }, 1)
            .build()
            .then(function (db) { return t.deepEqual(db, result); });
        return [2 /*return*/];
    });
}); });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9ja2VyLmJ1aWxkLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3Rlc3RzL01vY2tlci5idWlsZC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpQkFnSUE7OztBQWhJQSwyQkFBMEI7QUFDMUIsMkJBQXVDO0FBR3ZDLFVBQUksQ0FBQyw0QkFBNEIsRUFBRSxVQUFNLENBQUM7OztRQUNsQyxNQUFNLEdBQUc7WUFDVCxLQUFLLEVBQUU7Z0JBQ0g7b0JBQ0ksS0FBSyxFQUFFLE9BQU87aUJBQ2pCO2FBQ0o7U0FDSixDQUFBO1FBQ0csSUFBSSxHQUFHLElBQUksU0FBTSxFQUFFLENBQUE7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSyxPQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUE7OztLQUNqRCxDQUFDLENBQUE7QUFFRixVQUFJLENBQUMseUJBQXlCLEVBQUUsVUFBTSxDQUFDOzs7OztnQkFDL0IsTUFBTSxHQUFHO29CQUNULEtBQUssRUFBRTt3QkFDSDs0QkFDSSxLQUFLLEVBQUUsT0FBTzt5QkFDakI7cUJBQ0o7aUJBQ0osQ0FBQTtnQkFDRyxJQUFJLEdBQUcsSUFBSSxTQUFNLEVBQUUsQ0FBQTtnQkFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDN0QsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFD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